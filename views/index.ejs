<!DOCTYPE html>
<div class="container-fluid">
  <h1>Cone of Silence</h1>
  
  <div class="row show-grid">

    <form class="well span5">

      <div class="row show-grid">
        <div class="span5">
          <textarea id="secretText" data-bind="value: secretText, valueUpdate: 'afterkeydown'" class="secret-text span5" rows="12" placeholder="Secret text…"></textarea>
        </div>
      </div>

      <div class="row show-grid">
        <div class="span5 input-append">
            <!-- must be on 1 line for bootstrap prepend -->
            <input id="secretKey" data-bind="value: secretKey, valueUpdate: 'afterkeydown'" class="secret-key" type="password" placeholder="Secret key…"><button data-bind="enable: canEncode, click: encode" class="btn">Encode</button><button data-bind="enable: canEncode, click: decode" class="btn">Decode</button>
        </div>
      </div>

      <div class="row show-grid">
        <div class="span5">
          <span class="file-loader">
            <button class="btn">Load</button>
            <input type="file" data-bind="event: { change: load }"/>
          </span>
        </div>
      </div>

      <div class="alert alert-error" data-bind="visible: error">
        <button class="close" data-bind="click: showError(false), clickBubble: false">×</button>
        <span data-bind="html: errorMessage"></span>
      </div>

    </form>
  </div>

</div>
  
<script src="/jquery.js"></script>
<script src="/knockout-2.1.0.debug.js"></script>
<script type = "text/javascript">

  function ViewModel() {
    var that = this;
    that.secretText = ko.observable('');
    that.secretKey = ko.observable('');
    that.canEncode = ko.computed(function() {
      return that.secretKey().length > 0 && that.secretText().length > 0;
    });
    that.error = ko.observable(false);
    that.errorMessage = ko.observable('');
    that.showError = function(val) { that.error(val); }; 
    that.encode = function() {
      $.ajax({
        type: "POST",
        url: "encode",
        data: { secretText: that.secretText(), secretKey: that.secretKey() }
      }).done(function( data ) {
        console.log( "returned: " + data );
        that.secretText(data);
      }).fail(function( data ) {
        that.errorMessage('Encode failed.');
        that.showError(true);
      });
    };
    that.decode = function() {
      $.ajax({
        type: "POST",
        url: "decode",
        data: { secretText: that.secretText(), secretKey: that.secretKey() }
      }).done(function( data ) {
        console.log( "returned: " + data );
        that.secretText(data);
      }).fail(function( data ) {
        that.errorMessage('Decode failed.');
        that.showError(true);
      });
    };
    that.load = function(data, evt) {
      var file = evt.target.files[0];
      if (file) {
        if (file.type.match('text.*')) {
            var r = new FileReader();
            r.onload = function(e) { 
              that.secretText(e.target.result);
            }
            r.readAsText(file);
        }
        else {
          that.errorMessage('Not a text file.');
          that.showError(true);
        }
      } else { 
        that.errorMessage('Could not load file.');
        that.showError(true);
      }
    };
  };

  var vm;
  $(function() {
    vm = new ViewModel();
    ko.applyBindings(vm);
  });
</script>
